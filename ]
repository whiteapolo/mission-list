import {
  Component,
  CUSTOM_ELEMENTS_SCHEMA,
  Inject,
  OnInit,
} from '@angular/core';
import {
  MAT_DIALOG_DATA,
  MatDialog,
  MatDialogRef,
} from '@angular/material/dialog';
import { Mission } from '../mission';
import { MissionStatus } from '../mission-status';
import { MissionService } from '../mission.service';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';
import { MatSelectModule } from '@angular/material/select';

interface MissionModalData {
  mission: Mission;
  title: string;
}

@Component({
  selector: 'app-mission-modal',
  templateUrl: './mission-modal.component.html',
  styleUrls: ['./mission-modal.component.less'],
})
export class MissionModalComponent {
  missionStatusTypes = Object.values(MissionStatus);
  flatMissionsArray: Mission[] = [];
  mission: Mission;
  selectedMission: Mission | undefined;

  missionForm = this.formBuilder.group(
    {
      title: [
        '',
        [Validators.required, Validators.maxLength(3), Validators.minLength(1)],
      ],
      status: [MissionStatus.ACTIVE],
      parent: [''],
    },
    {
      updateOn: 'submit',
    }
  );

  constructor(
    public dialogRef: MatDialogRef<MissionModalComponent>,
    @Inject(MAT_DIALOG_DATA) public data: MissionModalData,
    private missionService: MissionService,
    private formBuilder: FormBuilder
  ) {
    this.mission = { ...data.mission };
    missionService.getMissionsAsFlatArray().subscribe((missions) => {
      this.flatMissionsArray = missions;
    });
  }

  setSelectedParent(mission: Mission) {
    this.selectedMission = mission;
    console.log('selected: ', this.selectedMission);
  }

  cancel() {
    console.log('Dialog canceled');
    this.dialogRef.close();
  }

  save() {
    if (this.missionForm.invalid) {
      return;
    }

    this.missionService.addMission(this.missionForm.value.parent, {
      ...this.mission,
      ...this.missionForm.value,
    });
    this.dialogRef.close(this.mission);
  }

  displayMissionTitle(mission: Mission) {
    return mission.title;
  }

  isFieldValid(field: string) {
    return (
      this.missionForm.get(field)?.valid ||
      this.missionForm.get(field)?.untouched
    );
  }
}
